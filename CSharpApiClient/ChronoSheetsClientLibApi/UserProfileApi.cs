/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserProfileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>CSApiResponseDoLoginResponse</returns>
        CSApiResponseDoLoginResponse UserProfileDoLogin (CSDoLoginRequest request);

        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>ApiResponse of CSApiResponseDoLoginResponse</returns>
        ApiResponse<CSApiResponseDoLoginResponse> UserProfileDoLoginWithHttpInfo (CSDoLoginRequest request);
        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseBoolean</returns>
        CSApiResponseBoolean UserProfileDoLogout (string xChronosheetsAuth);

        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseBoolean</returns>
        ApiResponse<CSApiResponseBoolean> UserProfileDoLogoutWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseUserProfile</returns>
        CSApiResponseUserProfile UserProfileGetMyProfile (string xChronosheetsAuth);

        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseUserProfile</returns>
        ApiResponse<CSApiResponseUserProfile> UserProfileGetMyProfileWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseBoolean</returns>
        CSApiResponseBoolean UserProfileKeepSessionAlive (string xChronosheetsAuth);

        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseBoolean</returns>
        ApiResponse<CSApiResponseBoolean> UserProfileKeepSessionAliveWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseUpdateProfileResponse</returns>
        CSApiResponseUpdateProfileResponse UserProfileUpdateMyProfile (CSUpdateMyProfileRequest request, string xChronosheetsAuth);

        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseUpdateProfileResponse</returns>
        ApiResponse<CSApiResponseUpdateProfileResponse> UserProfileUpdateMyProfileWithHttpInfo (CSUpdateMyProfileRequest request, string xChronosheetsAuth);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>Task of CSApiResponseDoLoginResponse</returns>
        System.Threading.Tasks.Task<CSApiResponseDoLoginResponse> UserProfileDoLoginAsync (CSDoLoginRequest request);

        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>Task of ApiResponse (CSApiResponseDoLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSApiResponseDoLoginResponse>> UserProfileDoLoginAsyncWithHttpInfo (CSDoLoginRequest request);
        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseBoolean</returns>
        System.Threading.Tasks.Task<CSApiResponseBoolean> UserProfileDoLogoutAsync (string xChronosheetsAuth);

        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseBoolean)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSApiResponseBoolean>> UserProfileDoLogoutAsyncWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseUserProfile</returns>
        System.Threading.Tasks.Task<CSApiResponseUserProfile> UserProfileGetMyProfileAsync (string xChronosheetsAuth);

        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseUserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSApiResponseUserProfile>> UserProfileGetMyProfileAsyncWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseBoolean</returns>
        System.Threading.Tasks.Task<CSApiResponseBoolean> UserProfileKeepSessionAliveAsync (string xChronosheetsAuth);

        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseBoolean)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSApiResponseBoolean>> UserProfileKeepSessionAliveAsyncWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseUpdateProfileResponse</returns>
        System.Threading.Tasks.Task<CSApiResponseUpdateProfileResponse> UserProfileUpdateMyProfileAsync (CSUpdateMyProfileRequest request, string xChronosheetsAuth);

        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseUpdateProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSApiResponseUpdateProfileResponse>> UserProfileUpdateMyProfileAsyncWithHttpInfo (CSUpdateMyProfileRequest request, string xChronosheetsAuth);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserProfileApi : IUserProfileApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserProfileApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserProfileApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>CSApiResponseDoLoginResponse</returns>
        public CSApiResponseDoLoginResponse UserProfileDoLogin (CSDoLoginRequest request)
        {
             ApiResponse<CSApiResponseDoLoginResponse> localVarResponse = UserProfileDoLoginWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>ApiResponse of CSApiResponseDoLoginResponse</returns>
        public ApiResponse< CSApiResponseDoLoginResponse > UserProfileDoLoginWithHttpInfo (CSDoLoginRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileDoLogin");

            var localVarPath = "/api/UserProfile/DoLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseDoLoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseDoLoginResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseDoLoginResponse)));
        }

        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>Task of CSApiResponseDoLoginResponse</returns>
        public async System.Threading.Tasks.Task<CSApiResponseDoLoginResponse> UserProfileDoLoginAsync (CSDoLoginRequest request)
        {
             ApiResponse<CSApiResponseDoLoginResponse> localVarResponse = await UserProfileDoLoginAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request object containing your username/email and password.</param>
        /// <returns>Task of ApiResponse (CSApiResponseDoLoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CSApiResponseDoLoginResponse>> UserProfileDoLoginAsyncWithHttpInfo (CSDoLoginRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileDoLogin");

            var localVarPath = "/api/UserProfile/DoLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseDoLoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseDoLoginResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseDoLoginResponse)));
        }

        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseBoolean</returns>
        public CSApiResponseBoolean UserProfileDoLogout (string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseBoolean> localVarResponse = UserProfileDoLogoutWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseBoolean</returns>
        public ApiResponse< CSApiResponseBoolean > UserProfileDoLogoutWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileDoLogout");

            var localVarPath = "/api/UserProfile/DoLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseBoolean)));
        }

        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseBoolean</returns>
        public async System.Threading.Tasks.Task<CSApiResponseBoolean> UserProfileDoLogoutAsync (string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseBoolean> localVarResponse = await UserProfileDoLogoutAsyncWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseBoolean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CSApiResponseBoolean>> UserProfileDoLogoutAsyncWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileDoLogout");

            var localVarPath = "/api/UserProfile/DoLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseBoolean)));
        }

        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseUserProfile</returns>
        public CSApiResponseUserProfile UserProfileGetMyProfile (string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseUserProfile> localVarResponse = UserProfileGetMyProfileWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseUserProfile</returns>
        public ApiResponse< CSApiResponseUserProfile > UserProfileGetMyProfileWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileGetMyProfile");

            var localVarPath = "/api/UserProfile/GetMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileGetMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseUserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseUserProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseUserProfile)));
        }

        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseUserProfile</returns>
        public async System.Threading.Tasks.Task<CSApiResponseUserProfile> UserProfileGetMyProfileAsync (string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseUserProfile> localVarResponse = await UserProfileGetMyProfileAsyncWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseUserProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CSApiResponseUserProfile>> UserProfileGetMyProfileAsyncWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileGetMyProfile");

            var localVarPath = "/api/UserProfile/GetMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileGetMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseUserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseUserProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseUserProfile)));
        }

        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseBoolean</returns>
        public CSApiResponseBoolean UserProfileKeepSessionAlive (string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseBoolean> localVarResponse = UserProfileKeepSessionAliveWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseBoolean</returns>
        public ApiResponse< CSApiResponseBoolean > UserProfileKeepSessionAliveWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileKeepSessionAlive");

            var localVarPath = "/api/UserProfile/KeepSessionAlive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileKeepSessionAlive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseBoolean)));
        }

        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseBoolean</returns>
        public async System.Threading.Tasks.Task<CSApiResponseBoolean> UserProfileKeepSessionAliveAsync (string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseBoolean> localVarResponse = await UserProfileKeepSessionAliveAsyncWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Keep a session alive.  Use this method to keep a session active.  You could use this to &#39;ping&#39; ChronoSheets every &#39;x&#39; minutes to make sure your Auth Token will keep working.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseBoolean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CSApiResponseBoolean>> UserProfileKeepSessionAliveAsyncWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileKeepSessionAlive");

            var localVarPath = "/api/UserProfile/KeepSessionAlive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileKeepSessionAlive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseBoolean)));
        }

        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CSApiResponseUpdateProfileResponse</returns>
        public CSApiResponseUpdateProfileResponse UserProfileUpdateMyProfile (CSUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseUpdateProfileResponse> localVarResponse = UserProfileUpdateMyProfileWithHttpInfo(request, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CSApiResponseUpdateProfileResponse</returns>
        public ApiResponse< CSApiResponseUpdateProfileResponse > UserProfileUpdateMyProfileWithHttpInfo (CSUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileUpdateMyProfile");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileUpdateMyProfile");

            var localVarPath = "/api/UserProfile/UpdateMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileUpdateMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseUpdateProfileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseUpdateProfileResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseUpdateProfileResponse)));
        }

        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CSApiResponseUpdateProfileResponse</returns>
        public async System.Threading.Tasks.Task<CSApiResponseUpdateProfileResponse> UserProfileUpdateMyProfileAsync (CSUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
             ApiResponse<CSApiResponseUpdateProfileResponse> localVarResponse = await UserProfileUpdateMyProfileAsyncWithHttpInfo(request, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An Update MyProfile Request object containing updated fields.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CSApiResponseUpdateProfileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CSApiResponseUpdateProfileResponse>> UserProfileUpdateMyProfileAsyncWithHttpInfo (CSUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileUpdateMyProfile");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileUpdateMyProfile");

            var localVarPath = "/api/UserProfile/UpdateMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileUpdateMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CSApiResponseUpdateProfileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CSApiResponseUpdateProfileResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CSApiResponseUpdateProfileResponse)));
        }

    }
}
