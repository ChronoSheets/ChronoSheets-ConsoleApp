/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChronoSheetsAPI.Client.SwaggerDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// Fields for inserting a new set of Pay Rates for a user.  Archiving of the previous Pay Rate is done for you automatically
    /// </summary>
    [DataContract]
    public partial class CSInsertUserHourlyRateRequest :  IEquatable<CSInsertUserHourlyRateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSInsertUserHourlyRateRequest" /> class.
        /// </summary>
        /// <param name="UserId">The Id of the User that is getting the new set of Pay Rates.</param>
        /// <param name="HourlyRate">The Hourly Rate the employee should receive during their usual rostered hours.</param>
        /// <param name="HourlyOvertimeRate">The Hourly Rate the employee should receive during outside of their usual rostered hours.</param>
        /// <param name="CurrentDate">The current date time.</param>
        public CSInsertUserHourlyRateRequest(int? UserId = default(int?), double? HourlyRate = default(double?), double? HourlyOvertimeRate = default(double?), DateTime? CurrentDate = default(DateTime?))
        {
            this.UserId = UserId;
            this.HourlyRate = HourlyRate;
            this.HourlyOvertimeRate = HourlyOvertimeRate;
            this.CurrentDate = CurrentDate;
        }
        
        /// <summary>
        /// The Id of the User that is getting the new set of Pay Rates
        /// </summary>
        /// <value>The Id of the User that is getting the new set of Pay Rates</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// The Hourly Rate the employee should receive during their usual rostered hours
        /// </summary>
        /// <value>The Hourly Rate the employee should receive during their usual rostered hours</value>
        [DataMember(Name="HourlyRate", EmitDefaultValue=false)]
        public double? HourlyRate { get; set; }

        /// <summary>
        /// The Hourly Rate the employee should receive during outside of their usual rostered hours
        /// </summary>
        /// <value>The Hourly Rate the employee should receive during outside of their usual rostered hours</value>
        [DataMember(Name="HourlyOvertimeRate", EmitDefaultValue=false)]
        public double? HourlyOvertimeRate { get; set; }

        /// <summary>
        /// The current date time
        /// </summary>
        /// <value>The current date time</value>
        [DataMember(Name="CurrentDate", EmitDefaultValue=false)]
        public DateTime? CurrentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CSInsertUserHourlyRateRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  HourlyOvertimeRate: ").Append(HourlyOvertimeRate).Append("\n");
            sb.Append("  CurrentDate: ").Append(CurrentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSInsertUserHourlyRateRequest);
        }

        /// <summary>
        /// Returns true if CSInsertUserHourlyRateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CSInsertUserHourlyRateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSInsertUserHourlyRateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.HourlyRate == input.HourlyRate ||
                    (this.HourlyRate != null &&
                    this.HourlyRate.Equals(input.HourlyRate))
                ) && 
                (
                    this.HourlyOvertimeRate == input.HourlyOvertimeRate ||
                    (this.HourlyOvertimeRate != null &&
                    this.HourlyOvertimeRate.Equals(input.HourlyOvertimeRate))
                ) && 
                (
                    this.CurrentDate == input.CurrentDate ||
                    (this.CurrentDate != null &&
                    this.CurrentDate.Equals(input.CurrentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.HourlyRate != null)
                    hashCode = hashCode * 59 + this.HourlyRate.GetHashCode();
                if (this.HourlyOvertimeRate != null)
                    hashCode = hashCode * 59 + this.HourlyOvertimeRate.GetHashCode();
                if (this.CurrentDate != null)
                    hashCode = hashCode * 59 + this.CurrentDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
