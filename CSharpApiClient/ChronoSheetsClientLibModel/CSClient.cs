/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChronoSheetsAPI.Client.SwaggerDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// CSClient
    /// </summary>
    [DataContract]
    public partial class CSClient :  IEquatable<CSClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSClient" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="OrganisationId">OrganisationId.</param>
        /// <param name="ClientName">ClientName.</param>
        /// <param name="ClientAddressLine1">ClientAddressLine1.</param>
        /// <param name="ClientAddressLine2">ClientAddressLine2.</param>
        /// <param name="ClientSuburb">ClientSuburb.</param>
        /// <param name="ClientState">ClientState.</param>
        /// <param name="ClientPostCode">ClientPostCode.</param>
        /// <param name="PersonOfContact">PersonOfContact.</param>
        /// <param name="ClientPhoneNumber">ClientPhoneNumber.</param>
        /// <param name="ClientMobileNumber">ClientMobileNumber.</param>
        /// <param name="ClientEmailAddress">ClientEmailAddress.</param>
        /// <param name="ClientWebURL">ClientWebURL.</param>
        /// <param name="ProjectCount">ProjectCount.</param>
        public CSClient(int? Id = default(int?), int? OrganisationId = default(int?), string ClientName = default(string), string ClientAddressLine1 = default(string), string ClientAddressLine2 = default(string), string ClientSuburb = default(string), string ClientState = default(string), string ClientPostCode = default(string), string PersonOfContact = default(string), string ClientPhoneNumber = default(string), string ClientMobileNumber = default(string), string ClientEmailAddress = default(string), string ClientWebURL = default(string), int? ProjectCount = default(int?))
        {
            this.Id = Id;
            this.OrganisationId = OrganisationId;
            this.ClientName = ClientName;
            this.ClientAddressLine1 = ClientAddressLine1;
            this.ClientAddressLine2 = ClientAddressLine2;
            this.ClientSuburb = ClientSuburb;
            this.ClientState = ClientState;
            this.ClientPostCode = ClientPostCode;
            this.PersonOfContact = PersonOfContact;
            this.ClientPhoneNumber = ClientPhoneNumber;
            this.ClientMobileNumber = ClientMobileNumber;
            this.ClientEmailAddress = ClientEmailAddress;
            this.ClientWebURL = ClientWebURL;
            this.ProjectCount = ProjectCount;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganisationId
        /// </summary>
        [DataMember(Name="OrganisationId", EmitDefaultValue=false)]
        public int? OrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets ClientName
        /// </summary>
        [DataMember(Name="ClientName", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Gets or Sets ClientAddressLine1
        /// </summary>
        [DataMember(Name="ClientAddressLine1", EmitDefaultValue=false)]
        public string ClientAddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets ClientAddressLine2
        /// </summary>
        [DataMember(Name="ClientAddressLine2", EmitDefaultValue=false)]
        public string ClientAddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets ClientSuburb
        /// </summary>
        [DataMember(Name="ClientSuburb", EmitDefaultValue=false)]
        public string ClientSuburb { get; set; }

        /// <summary>
        /// Gets or Sets ClientState
        /// </summary>
        [DataMember(Name="ClientState", EmitDefaultValue=false)]
        public string ClientState { get; set; }

        /// <summary>
        /// Gets or Sets ClientPostCode
        /// </summary>
        [DataMember(Name="ClientPostCode", EmitDefaultValue=false)]
        public string ClientPostCode { get; set; }

        /// <summary>
        /// Gets or Sets PersonOfContact
        /// </summary>
        [DataMember(Name="PersonOfContact", EmitDefaultValue=false)]
        public string PersonOfContact { get; set; }

        /// <summary>
        /// Gets or Sets ClientPhoneNumber
        /// </summary>
        [DataMember(Name="ClientPhoneNumber", EmitDefaultValue=false)]
        public string ClientPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets ClientMobileNumber
        /// </summary>
        [DataMember(Name="ClientMobileNumber", EmitDefaultValue=false)]
        public string ClientMobileNumber { get; set; }

        /// <summary>
        /// Gets or Sets ClientEmailAddress
        /// </summary>
        [DataMember(Name="ClientEmailAddress", EmitDefaultValue=false)]
        public string ClientEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets ClientWebURL
        /// </summary>
        [DataMember(Name="ClientWebURL", EmitDefaultValue=false)]
        public string ClientWebURL { get; set; }

        /// <summary>
        /// Gets or Sets ProjectCount
        /// </summary>
        [DataMember(Name="ProjectCount", EmitDefaultValue=false)]
        public int? ProjectCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CSClient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ClientAddressLine1: ").Append(ClientAddressLine1).Append("\n");
            sb.Append("  ClientAddressLine2: ").Append(ClientAddressLine2).Append("\n");
            sb.Append("  ClientSuburb: ").Append(ClientSuburb).Append("\n");
            sb.Append("  ClientState: ").Append(ClientState).Append("\n");
            sb.Append("  ClientPostCode: ").Append(ClientPostCode).Append("\n");
            sb.Append("  PersonOfContact: ").Append(PersonOfContact).Append("\n");
            sb.Append("  ClientPhoneNumber: ").Append(ClientPhoneNumber).Append("\n");
            sb.Append("  ClientMobileNumber: ").Append(ClientMobileNumber).Append("\n");
            sb.Append("  ClientEmailAddress: ").Append(ClientEmailAddress).Append("\n");
            sb.Append("  ClientWebURL: ").Append(ClientWebURL).Append("\n");
            sb.Append("  ProjectCount: ").Append(ProjectCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSClient);
        }

        /// <summary>
        /// Returns true if CSClient instances are equal
        /// </summary>
        /// <param name="input">Instance of CSClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSClient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.ClientAddressLine1 == input.ClientAddressLine1 ||
                    (this.ClientAddressLine1 != null &&
                    this.ClientAddressLine1.Equals(input.ClientAddressLine1))
                ) && 
                (
                    this.ClientAddressLine2 == input.ClientAddressLine2 ||
                    (this.ClientAddressLine2 != null &&
                    this.ClientAddressLine2.Equals(input.ClientAddressLine2))
                ) && 
                (
                    this.ClientSuburb == input.ClientSuburb ||
                    (this.ClientSuburb != null &&
                    this.ClientSuburb.Equals(input.ClientSuburb))
                ) && 
                (
                    this.ClientState == input.ClientState ||
                    (this.ClientState != null &&
                    this.ClientState.Equals(input.ClientState))
                ) && 
                (
                    this.ClientPostCode == input.ClientPostCode ||
                    (this.ClientPostCode != null &&
                    this.ClientPostCode.Equals(input.ClientPostCode))
                ) && 
                (
                    this.PersonOfContact == input.PersonOfContact ||
                    (this.PersonOfContact != null &&
                    this.PersonOfContact.Equals(input.PersonOfContact))
                ) && 
                (
                    this.ClientPhoneNumber == input.ClientPhoneNumber ||
                    (this.ClientPhoneNumber != null &&
                    this.ClientPhoneNumber.Equals(input.ClientPhoneNumber))
                ) && 
                (
                    this.ClientMobileNumber == input.ClientMobileNumber ||
                    (this.ClientMobileNumber != null &&
                    this.ClientMobileNumber.Equals(input.ClientMobileNumber))
                ) && 
                (
                    this.ClientEmailAddress == input.ClientEmailAddress ||
                    (this.ClientEmailAddress != null &&
                    this.ClientEmailAddress.Equals(input.ClientEmailAddress))
                ) && 
                (
                    this.ClientWebURL == input.ClientWebURL ||
                    (this.ClientWebURL != null &&
                    this.ClientWebURL.Equals(input.ClientWebURL))
                ) && 
                (
                    this.ProjectCount == input.ProjectCount ||
                    (this.ProjectCount != null &&
                    this.ProjectCount.Equals(input.ProjectCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.ClientAddressLine1 != null)
                    hashCode = hashCode * 59 + this.ClientAddressLine1.GetHashCode();
                if (this.ClientAddressLine2 != null)
                    hashCode = hashCode * 59 + this.ClientAddressLine2.GetHashCode();
                if (this.ClientSuburb != null)
                    hashCode = hashCode * 59 + this.ClientSuburb.GetHashCode();
                if (this.ClientState != null)
                    hashCode = hashCode * 59 + this.ClientState.GetHashCode();
                if (this.ClientPostCode != null)
                    hashCode = hashCode * 59 + this.ClientPostCode.GetHashCode();
                if (this.PersonOfContact != null)
                    hashCode = hashCode * 59 + this.PersonOfContact.GetHashCode();
                if (this.ClientPhoneNumber != null)
                    hashCode = hashCode * 59 + this.ClientPhoneNumber.GetHashCode();
                if (this.ClientMobileNumber != null)
                    hashCode = hashCode * 59 + this.ClientMobileNumber.GetHashCode();
                if (this.ClientEmailAddress != null)
                    hashCode = hashCode * 59 + this.ClientEmailAddress.GetHashCode();
                if (this.ClientWebURL != null)
                    hashCode = hashCode * 59 + this.ClientWebURL.GetHashCode();
                if (this.ProjectCount != null)
                    hashCode = hashCode * 59 + this.ProjectCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
