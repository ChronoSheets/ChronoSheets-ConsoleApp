/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChronoSheetsAPI.Client.SwaggerDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// Fields used to update a Task
    /// </summary>
    [DataContract]
    public partial class CSUpdateTaskRequest :  IEquatable<CSUpdateTaskRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSUpdateTaskRequest" /> class.
        /// </summary>
        /// <param name="Id">The Id of the Task that is to be updated.</param>
        /// <param name="TaskName">The updated Task Name.</param>
        /// <param name="IsDeleted">Whether or not this Task should be marked as deleted.</param>
        /// <param name="TripEnabled">Whether or not this Task should have GPS Trip Recording enabled.</param>
        public CSUpdateTaskRequest(int? Id = default(int?), string TaskName = default(string), bool? IsDeleted = default(bool?), bool? TripEnabled = default(bool?))
        {
            this.Id = Id;
            this.TaskName = TaskName;
            this.IsDeleted = IsDeleted;
            this.TripEnabled = TripEnabled;
        }
        
        /// <summary>
        /// The Id of the Task that is to be updated
        /// </summary>
        /// <value>The Id of the Task that is to be updated</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The updated Task Name
        /// </summary>
        /// <value>The updated Task Name</value>
        [DataMember(Name="TaskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Whether or not this Task should be marked as deleted
        /// </summary>
        /// <value>Whether or not this Task should be marked as deleted</value>
        [DataMember(Name="IsDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Whether or not this Task should have GPS Trip Recording enabled
        /// </summary>
        /// <value>Whether or not this Task should have GPS Trip Recording enabled</value>
        [DataMember(Name="TripEnabled", EmitDefaultValue=false)]
        public bool? TripEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CSUpdateTaskRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  TripEnabled: ").Append(TripEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSUpdateTaskRequest);
        }

        /// <summary>
        /// Returns true if CSUpdateTaskRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CSUpdateTaskRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSUpdateTaskRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.TripEnabled == input.TripEnabled ||
                    (this.TripEnabled != null &&
                    this.TripEnabled.Equals(input.TripEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.TripEnabled != null)
                    hashCode = hashCode * 59 + this.TripEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
